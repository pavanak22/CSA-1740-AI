import math

def alpha_beta(node, depth, alpha, beta, maximizingPlayer, game_tree):
    # Base case: If we are at a leaf node or the maximum depth, return the node's value.
    if depth == 0 or isinstance(game_tree[node], int):
        return game_tree[node]

    if maximizingPlayer:
        max_eval = -math.inf
        for child in game_tree[node]:
            eval = alpha_beta(child, depth-1, alpha, beta, False, game_tree)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for child in game_tree[node]:
            eval = alpha_beta(child, depth-1, alpha, beta, True, game_tree)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

# Define the game tree.
game_tree = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': 3,
    'E': 5,
    'F': 6,
    'G': 9
}

# Start the alpha-beta pruning algorithm from the root node 'A'.
optimal_value = alpha_beta('A', 3, -math.inf, math.inf, True, game_tree)
print("Optimal value:", optimal_value)
