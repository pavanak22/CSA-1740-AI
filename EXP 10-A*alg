from queue import PriorityQueue

def a_star_search(start, goal, graph, h):
    open_list = PriorityQueue()
    open_list.put((0, start))

    g_costs = {start: 0}
    came_from = {start: None}

    while not open_list.empty():
        current = open_list.get()[1]
        if current == goal:
            path = []
            while current is not None:
                path.append(current)
                current = came_from[current]
            return path[::-1]

        for neighbor, cost in graph[current]:
            new_cost = g_costs[current] + cost

            if neighbor not in g_costs or new_cost < g_costs[neighbor]:
                g_costs[neighbor] = new_cost
                priority = new_cost + h(neighbor, goal)
                open_list.put((priority, neighbor))
                came_from[neighbor] = current

    return None

def heuristic(a, b):
    (x1, y1) = a
    (x2, y2) = b
    return abs(x1 - x2) + abs(y1 - y2)
graph = {
    (0, 0): [((0, 1), 1), ((1, 0), 1)],
    (0, 1): [((0, 0), 1), ((1, 1), 1), ((0, 2), 1)],
    (0, 2): [((0, 1), 1), ((1, 2), 1)],
    (1, 0): [((0, 0), 1), ((1, 1), 1)],
    (1, 1): [((1, 0), 1), ((0, 1), 1), ((1, 2), 1), ((2, 1), 1)],
    (1, 2): [((0, 2), 1), ((1, 1), 1), ((2, 2), 1)],
    (2, 1): [((1, 1), 1), ((2, 2), 1)],
    (2, 2): [((1, 2), 1), ((2, 1), 1)]
}

start = (0, 0)
goal = (2, 2)

path = a_star_search(start, goal, graph, heuristic)

print("Path found:", path)
