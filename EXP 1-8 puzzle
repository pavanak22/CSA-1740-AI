from collections import deque

def bfs(start, goal):
    queue = deque([(start, [])])
    seen = {start}
    while queue:
        state, path = queue.popleft()
        if state == goal:
            return path + [state]
        i = state.index(0)
        for d in (-1, 1, -3, 3):
            j = i + d
            if abs(i % 3 - j % 3) + abs(i // 3 - j // 3) != 1 or not 0 <= j < 9:
                continue
            new_state = list(state)
            new_state[i], new_state[j] = new_state[j], new_state[i]
            new_state = tuple(new_state)
            if new_state not in seen:
                seen.add(new_state)
                queue.append((new_state, path + [state]))

start_state = (1, 2, 3, 4, 0, 6, 7, 5, 8)
goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)
solution = bfs(start_state, goal_state)

for step in solution:
    print(step)
